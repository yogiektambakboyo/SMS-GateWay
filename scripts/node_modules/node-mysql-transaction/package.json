{
  "name": "node-mysql-transaction",
  "version": "0.0.31",
  "description": "transactions wrapper for node-mysql 2.0 driver",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": "",
  "keywords": [
    "mysql",
    "mariadb",
    "transaction"
  ],
  "author": {
    "name": "Yoon, Hyuk-Beom"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "node-mysql-transaction\r\n===\r\n#### transaction wrapper for mysql driver\r\nbased on node-mysql: https://github.com/felixge/node-mysql\r\n\r\nnode-mysql-transaction is run by single callback function queue with dynamic multi connection structure.\r\n\r\nInstall\r\n---\r\n```\r\nnpm install node-mysql-transaction\r\n```\r\n\r\n\r\nMake transaction connection\r\n---\r\n```\r\n// tested mysql2.0.0-alpha7\r\nvar mysql = require('mysql');\r\n\r\nvar transaction =  require('node-mysql-transaction');\r\nvar trCon = transaction({\r\n  // mysql driver set \r\n  connection: [mysql.createConnection,{\r\n    user: ...,\r\n    password: ...,\r\n    database: ...,\r\n    ...\r\n  }],\r\n  \r\n  // number of static parallel connection\r\n  // you can chose it 0, if you want to use only dynamic connection.\r\n  staticConnection:3,\r\n  \r\n  // when queue length is more than 0, \r\n  // make temporary connection for increased volume of async work.\r\n  dynamicConnection:3,\r\n  \r\n  // auto time out rollback in ms\r\n  // turn off is 0\r\n  timeOut:600\r\n});\r\n```\r\n\r\n\r\nIntroduction\r\n---\r\n\r\n###transaction chain\r\n\r\n.chain method is transaction version of original mysql driver's Streaming query. Easily, you can make a bundling query request.\r\n\r\n\r\nMake chain\r\n\r\n```\r\nvar chain = trCon.chain();\r\n\r\nchain.\r\non('commit', function(){\r\n  console.log('number commit');\r\n}).\r\non('rollback', function(err){\r\n  console.log(err);\r\n});\r\n\r\nchain.\r\nquery('insert ...').\r\nquery('insert ...');\r\n\r\n```\r\n\r\nWhen after transaction complete, auto commit run and emit 'commit' event. If error occur in a transaction query chain, then auto rollback run and emit 'rollback' event.\r\n\r\nAuto commit can off.\r\n\r\n```\r\nvar chain = trCon.chain();\r\n\r\nchain.\r\non('commit', function(){\r\n  console.log('number commit');\r\n}).\r\non('rollback', function(err){\r\n  console.log(err);\r\n});\r\n\r\nchain.\r\nquery('insert ...').\r\nquery('insert ...').\r\nquery('insert ...').\r\nquery('insert ...').\r\non('result', function(result){\r\n  chain.commit();\r\n}).\r\nautoCommit(false);\r\n\r\n```\r\n\r\nQuery chain can linked after turn off an auto commit.\r\n\r\n```\r\nvar chain = trCon.chain();\r\n\r\nchain.\r\non('commit', function(){\r\n  console.log('number commit');\r\n}).\r\non('rollback', function(err){\r\n  console.log(err);\r\n});\r\n\r\nchain.\r\nquery('insert ...').\r\non('result', function(result){\r\n  chain.\r\n  query('insert ...').\r\n  on('result', function(result){\r\n    console.log('lol');\r\n  }).\r\n  query('insert ...').\r\n  on('result',function(result){\r\n    chain.\r\n    query('insert ...',[result.insertId]).\r\n    query('insert ...').\r\n    query('insert ...').\r\n    query('insert ...')\r\n    // auto commit run\r\n    // all of this is a single transaction\r\n  }).autoCommit(false);\r\n}).autoCommit(false);\r\n```\r\n\r\nEvery query function return it's event emitter object.\r\n\r\n```\r\nvar chain = trCon.chain();\r\n\r\nchain.\r\non('commit', function(){\r\n  console.log('number commit');\r\n}).\r\non('rollback', function(err){\r\n  console.log(err);\r\n});\r\n\r\nchain.\r\nquery('insert ...').\r\non('result', function(result){\r\n  console.log(result.insertId);\r\n}).\r\nquery('insert ...').\r\non('result', function(result){\r\n  chain.commit();\r\n}).\r\nautoCommit(false);\r\n\r\n```\r\n\r\nUnlike autocommit, auto rollback is always running. But if you attach error event listener to the query, auto rollback is turn off in that query.\r\n\r\n```\r\nvar chain = trCon.chain();\r\n\r\n...\r\n\r\nchain.\r\nquery('insert ...').\r\non('error', function(err){\r\n  console.log(err);\r\n  // now auto rollback is turned off\r\n}).\r\n// other queries auto rollback is still works\r\nquery('insert ...').\r\n...\r\n```\r\n\r\nchain can make a loop.\r\n\r\n```\r\nvar chain = trCon.chain();\r\nchain.\r\non('commit', function(){\r\n  console.log('chain commit');\r\n}).\r\non('rollback', function(err){\r\n  console.log(err);\r\n});\r\n\r\nfor(var i = 0; i < 10; i+=1) {\r\n  // loop in transaction\r\n  chain.query('insert ...',[...]);\r\n}\r\n```\r\n\r\n###Terminating\r\n\r\nCall end method. Method sending error to all callback function in the queue and connection terminating after current transaction finished.\r\n\r\n```\r\ntrCon.end()\r\n```\r\n\r\n###transaction query\r\n\r\nquery is not recommended method. The query method can be removal in a next version.\r\n\r\n.query style transaction can usable. But, in some case, the method is slower than chain. And you will make a lot of indent.\r\n\r\n```\r\n// With old style error handling\r\n// if you choose this way, auto rollback and timeout rollback is turn off\r\ntrCon.query('insert ...',[...],function(err,result){\r\n  if (err) {\r\n    return result.rollback();\r\n  }\r\n  trCon.query('insert ...',[...],function(err,otherResult){\r\n    if (err) {\r\n      return otherResult.rollback();\r\n    }\r\n    trCon.query('insert ...',[...],function(err,theOtherResult){\r\n      if (err) {\r\n        return theOtherResult.rollback();\r\n      }\r\n      theOtherResult.commit(function(err){\r\n        if (!err) {\r\n          console.log('complete')\r\n        }\r\n      });\r\n    });\r\n  });\r\n})\r\n```\r\n\r\nYou can choose rollback event for an error handling. In this way, you can turn on auto rollback and timeout rollback.\r\n\r\n```\r\n// now auto rollback and timeout rollback is working.\r\n// you don't need any error handling in the middle of transaction\r\n// If you call the query method after call end method, error occurred to callback function\r\n\r\ntrCon.query('insert ...',[...],function(err,result){\r\n\r\n  trCon.query('insert ...',['err'],function(err,otherResult){\r\n    \r\n    trCon.query('insert ...',[...],function(err,theOtherResult){\r\n      \r\n    });\r\n  });\r\n}).\r\non('rollback', function(err){\r\n  // normal error linked to here after rollback occur\r\n  console.log('trCon.query auto rollback');\r\n});\r\n```\r\n\r\nauto commit can turn off.\r\n\r\n```\r\n// result.rollback === otherResult.rollback === theOtherResult.rollback;\r\n\r\ntrCon.query('insert ...',[...],function(err,result){\r\n  trCon.query('insert ...',[...],function(err,otherResult){\r\n    trCon.query('insert ...',[...],function(err,theOtherResult){\r\n      // auto commit off\r\n      theOtherResult.autoCommit(false);\r\n      \r\n      setTimeout(function(){\r\n        theOtherResult.commit();\r\n        \r\n      },0);\r\n    });\r\n  });\r\n}).\r\non('commit', function(){\r\n  console.log('manual commit');\r\n}).\r\non('rollback',function(err){\r\n  console.log(err);\r\n});\r\n```\r\n\r\nUnlike chain method, .query method cannot linked to other event loop. even auto commit is off.\r\n\r\n```\r\ntrCon.query('insert ...',[...],function(err,result){\r\n  trCon.query('insert ...',[...],function(err,theOtherResult){\r\n    // auto commit off\r\n    theOtherResult.autoCommit(false);\r\n    \r\n    setTimeout(function(){\r\n      trCon.query('insert ...',[...],function(err,otherTransactionResult){\r\n        // This is new transaction!!\r\n        // Now, earlier 2 insert query  just waiting timeout rollback.\r\n        ...\r\n      });\r\n    },0);\r\n  });\r\n}).\r\non('commit', function(){\r\n  console.log('manual commit');\r\n}).\r\non('rollback',function(err){\r\n  console.log(err);\r\n});\r\n```\r\n\r\n\r\nUpdate\r\n---\r\n0.0.1: start\r\n\r\n0.0.2: Improvement of queue set structure. before, multi queue, multi connections -> now, single queue multi connections. Minor API change, but not about query, chain method\r\n\r\n0.0.22: Transaction can work only dynamic connection without any static connection.\r\n\r\n0.0.23: fix process.nextTick recursive. now module fit to the node.js 0.10\r\n\r\n0.0.3: default chain method setMaxListeners is 0. code and internal API update.\r\n\r\n0.0.31: query method update.",
  "_id": "node-mysql-transaction@0.0.31",
  "_from": "node-mysql-transaction@"
}
